<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hxy.core.community.dao.CommunityMapper">
	
	<resultMap type="com.hxy.core.community.entity.GroupTopic" id="topicResultMap">
        <id column="id" property="id"/>
        <result column="board_id" property="board_id"/>
        <result column="topic_type" property="topic_type"/>
        <result column="first_post_id" property="first_post_id"/>
        <result column="topic_title" property="topic_title"/>
        <result column="user_ip" property="user_ip"/>
        <result column="last_reply_date" property="last_reply_date"/>
        <result column="toplevel" property="toplevel"/>
        <result column="created_date" property="created_date"/>
        <result column="modified_date" property="modified_date"/>
        <result column="created_by" property="created_by"/>
        <result column="appUserName" property="appUserName"/>
        <result column="commentNum" property="commentNum"/>
        <result column="praiseNum" property="praiseNum"/>
        <result column="board_name" property="board_name"/>
		<association column="first_post_id" property="first_post" javaType="com.hxy.core.community.entity.TopicContext">
			<id column="first_post_id" property="id" />
			<result column="context" property="context" />
			<result column="status" property="status" />
			<result column="complaintNum" property="complaintNum" />
		</association>
    </resultMap>
    
    <select id="getAllGroupBoard" resultType="com.hxy.core.community.entity.GroupBoard">
		select b.* 
		from group_board b
		left join department d on b.oid = d.department_id
		order by b.board_type,d.type
	</select>
	
	<select id="queryGroupBoard" parameterType="map" resultType="com.hxy.core.community.entity.GroupBoard">
		select gb.*, ifnull(t.memberNum,0) as memberNum
		from group_board gb 
		left join
		(
			select b.id,count(ag.id) as memberNum 
			from group_board b 
			left join appuser_group ag on ag.group_id = b.id
			inner join app_user au on ag.appuser_id = au.id
			group by b.id
		) t on gb.id = t.id
		left join department d on gb.oid = d.department_id
		order by gb.board_type,d.type
		limit #{start},#{rows}
    </select>

    <select id="countGroupBoard" parameterType="map" resultType="long">
        select count(id) from group_board
    </select>
    
    <select id="queryGroupBoardMember" parameterType="map" resultType="com.hxy.core.appuser.entity.AppUser">
		select au.*,GROUP_CONCAT(REPLACE(c.fullName,',',' ')) as fullClassName
		from appuser_group ag
		inner join app_user au on ag.appuser_id = au.id
		left join userbase_info ui on FIND_IN_SET(ui.user_id,au.student_id)
		left join class_info c on ui.class_id = c.class_id
		<where>
            <if test="boardId!=null and boardId!=''">
                and ag.group_id = #{boardId}
            </if>
        </where>
		group by au.id
		limit #{start},#{rows}
    </select>

    <select id="countGroupBoardMember" parameterType="map" resultType="long">
        select count(ag.id) from appuser_group ag
        inner join app_user au on ag.appuser_id = au.id
        <where>
            <if test="boardId!=null and boardId!=''">
                and ag.group_id = #{boardId}
            </if>
        </where>
    </select>
	
	<insert id="insertGroupBoard" useGeneratedKeys="true" keyProperty="id" parameterType="com.hxy.core.community.entity.GroupBoard" >
		insert into group_board(board_name, board_type, board_logo, oid) 
		value(#{board_name}, #{board_type}, #{board_logo}, #{oid});
	</insert>
	
	<insert id="insertTopic" useGeneratedKeys="true" keyProperty="id" parameterType="com.hxy.core.community.entity.GroupTopic" >
		insert into group_topic(board_id, topic_title, topic_type, toplevel, user_ip, created_by, first_post_id, last_reply_date, modified_date, created_date) 
		value(#{board_id}, #{topic_title}, #{topic_type}, 1, #{user_ip}, null, null, NOW(), NOW(), NOW());
	</insert>

	<insert id="insertTopicContext" useGeneratedKeys="true" keyProperty="id" parameterType="com.hxy.core.community.entity.TopicContext" >
		insert into topic_context(topic_id, context, user_ip, created_by, created_date, modified_date) 
		value(#{topic_id}, #{context}, #{user_ip}, null, NOW(), NOW());
	</insert>
	
	<update id="updateGroupBoard" parameterType="com.hxy.core.community.entity.GroupBoard">
		UPDATE group_board
		<set>
	        <if test="board_name !=null and board_name !='' ">
	            board_name = #{board_name},
	        </if>
	        <if test="board_type !=null and board_type !='' ">
	            board_type = #{board_type},
	        </if>
	        <if test="board_logo !=null and board_logo !='' ">
	            board_logo = #{board_logo},
	        </if>
	        <if test="oid !=null and oid !='' ">
	            oid = #{oid},
	        </if>
    	</set>
		where id = #{id}
	</update>
	
	<update id="updateTopic" parameterType="com.hxy.core.community.entity.GroupTopic">
		UPDATE group_topic
		<set>
	        <if test="board_id !=null and board_id !='' ">
	            board_id = #{board_id},
	        </if>
	        <if test="topic_title !=null and topic_title !='' ">
	            topic_title = #{topic_title},
	        </if>
	        <if test="topic_type !=null and topic_type !='' ">
	            topic_type = #{topic_type},
	        </if>
	        <if test="toplevel !=null and toplevel !='' ">
	            toplevel = #{toplevel},
	        </if>
	        <if test="user_ip !=null and user_ip !='' ">
	            user_ip = #{user_ip},
	        </if>
	        <if test="created_by !=null and created_by !='' ">
	            created_by = #{created_by},
	        </if>
			<if test="first_post_id !=null and first_post_id !='' ">
	            first_post_id = #{first_post_id},
	        </if>
			<if test="last_reply_date !=null and last_reply_date !='' ">
	            last_reply_date = NOW(), 
	        </if>
			<if test="modified_date !=null and modified_date !='' ">
	            modified_date = NOW(),
	        </if>
    	</set>
		where id = #{id}
	</update>
	
	<update id="updateTopicContext" parameterType="com.hxy.core.community.entity.TopicContext">
		UPDATE topic_context
		<set>
	        <if test="topic_id !=null and topic_id !='' ">
	            topic_id = #{topic_id},
	        </if>
	        <if test="context !=null and context !='' ">
	            context = #{context},
	        </if>
	        <if test="user_ip !=null and user_ip !='' ">
	            user_ip = #{user_ip},
	        </if>
			<if test="created_by !=null and created_by !='' ">
	            created_by = #{created_by},
	        </if>
			<if test="created_date !=null and created_date !='' ">
	            created_date = NOW(), 
	        </if>
			<if test="modified_date !=null and modified_date !='' ">
	            modified_date = NOW(),
	        </if>
    	</set>
		where id = #{id}
	</update>
	
	<select id="getGroupBoardByDept" parameterType="long" resultType="com.hxy.core.community.entity.GroupBoard">
		select * from group_board
		where oid = #{department_id}
	</select>
	
	<select id="deleteGroupBoardByDept" parameterType="long">
		delete from group_board
		where oid = #{department_id}
	</select>
	
	
	
	
	<select id="getTopicById" parameterType="long" resultType="com.hxy.core.community.entity.GroupTopic">
		select * from group_topic
		where id = #{id}
	</select>

	
	<select id="queryTopic" parameterType="map" resultMap="topicResultMap">
        select tmp2.*,count(complaint.topic_context_id) as complaintNum from
		(
			select tmp.*,count(praise.topic_id) as praiseNum from 				
			(
				select t.*,au.user_name as appUserName,b.board_name,firstPost.context,firstPost.status,count(comm.topic_id)-1 as commentNum
				from group_topic t
				left join app_user au on t.created_by = au.id
				left join group_board b on t.board_id=b.id
				left join topic_context comm on t.id = comm.topic_id
				left join topic_context firstPost on t.first_post_id=firstPost.id
				<where>
		            <if test="topicType!=null and topicType!=''">
		                and t.topic_type=#{topicType}
		            </if>
		            <if test="parentId!=null and parentId!=''">
		                and t.board_id = #{parentId}
		            </if>
		            <if test="status!=null and status!=''">
		                and firstPost.status in (${status})
		            </if>
		            <if test="boardId!=null and boardId!=''">
		                and t.board_id = #{boardId}
		            </if>
		        </where>
				group by t.id,comm.topic_id
			) tmp
			left join group_praise praise on tmp.id = praise.topic_id
			group by tmp.id,praise.topic_id
		) tmp2
		left join topic_complaint complaint on tmp2.first_post_id = complaint.topic_context_id
		group by tmp2.id,complaint.topic_context_id
		limit #{start},#{rows}
    </select>

    <select id="countTopic" parameterType="map" resultType="long">
        select count(t.id) from group_topic t
		left join topic_context firstPost on t.first_post_id=firstPost.id
		<where>
            <if test="topicType!=null and topicType!=''">
                and t.topic_type=#{topicType}
            </if>
            <if test="parentId!=null and parentId!=''">
                and t.board_id = #{parentId}
            </if>
            <if test="status!=null and status!=''">
                and firstPost.status in (${status})
            </if>
            <if test="boardId!=null and boardId!=''">
                and t.board_id = #{boardId}
            </if>
        </where>
    </select>
    
    
    <select id="queryTopicContext" parameterType="map" resultType="com.hxy.core.community.entity.TopicContext">
		select c.*,au.user_name as appUserName,count(complaint.topic_context_id) as complaintNum
		from topic_context c
		left join app_user au on c.created_by = au.id
		left join topic_complaint complaint on c.id = complaint.topic_context_id
		where c.topic_id = #{topicId}
		group by c.id,complaint.topic_context_id
		order by c.id
		limit #{start},#{rows}
    </select>

    <select id="countTopicContext" parameterType="map" resultType="long">
        select count(c.id) from topic_context c
		where c.topic_id = #{topicId}
    </select>
    
    
    <select id="getTopicContextPics" parameterType="long" resultType="string">
        select pic from topic_pic
		where context_id = #{topic_context_id}
    </select>
	
	
	<select id="queryComplaint" parameterType="map" resultType="com.hxy.core.community.entity.Complaint">
		select c.*,au.user_name as appUserName
		from topic_complaint c
		left join app_user au on c.created_by = au.id
		where c.topic_context_id = #{contextId}
		limit #{start},#{rows}
    </select>

    <select id="countComplaint" parameterType="map" resultType="long">
        select count(c.id) from topic_complaint c
		where c.topic_context_id = #{contextId}
    </select>
    
    
    <select id="queryContextComplaint" parameterType="map" resultType="com.hxy.core.community.entity.TopicContext">
		select context.*,au.user_name as appUserName,count(complaint.id) as complaintNum
		from topic_complaint complaint
		inner join topic_context context on complaint.topic_context_id=context.id
		left outer join app_user au on context.created_by=au.id
		left outer join group_topic t1 on context.topic_id=t1.id and t1.topic_type!=2
		left outer join group_topic t2 on context.topic_id=t2.id and t2.topic_type=2
		left outer join group_topic t2_parent on t2.board_id = t2_parent.id
		<where>
            <if test="topicType!=null and topicType!=''">
                and (t1.topic_type=#{topicType} or t2_parent.topic_type=#{topicType})
            </if>
            <if test="status!=null and status!=''">
                and context.status = #{status}
            </if>
        </where>
		group by complaint.topic_context_id
		limit #{start},#{rows}
    </select>

    <select id="countContextComplaint" parameterType="map" resultType="long">
        select count(distinct context.id)
		from topic_complaint complaint
		inner join topic_context context on complaint.topic_context_id=context.id
		left outer join group_topic t1 on context.topic_id=t1.id and  t1.topic_type=1
		left outer join group_topic t2 on context.topic_id=t2.id and  t2.topic_type=2
		left outer join group_topic t2_parent on t2.board_id = t2_parent.id
		<where>
            <if test="topicType!=null and topicType!=''">
                and (t1.topic_type=#{topicType} or t2_parent.topic_type=#{topicType})
            </if>
            <if test="status!=null and status!=''">
                and context.status = #{status}
            </if>
        </where>
    </select>
    
    <update id="handleContextStatus" parameterType="map">
        update topic_context
        set	status=#{handleStatus}
        where id=#{contextId}
    </update>
</mapper>