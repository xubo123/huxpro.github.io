package com.hxy.core.event.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hxy.base.entity.DataGrid;
import com.hxy.core.event.dao.EventMapper;
import com.hxy.core.event.entity.Event;
import com.hxy.core.event.entity.SignUserProfile;
import com.hxy.system.Global;

@Service("eventService")
public class EventServiceImpl implements EventService {
	@Autowired
    private EventMapper eventMapper;


    public DataGrid<Event> dataGrid(Map<String, Object> map) {
        DataGrid<Event> dataGrid = new DataGrid<Event>();
        long total = eventMapper.count(map);
        dataGrid.setTotal(total);
        int start = ((Integer) map.get("page") - 1) * (Integer) map.get("rows");
        map.put("start", start);
        List<Event> list = eventMapper.query(map);
        dataGrid.setRows(list);
        return dataGrid;
    }


    public Event getById(long id) {
    	Event event = eventMapper.getById(id);
    	event.setPicUrl(Global.URL_DOMAIN + event.getPic());
        return event;
    }


    public void save(Event event) {
        if (event == null)
            throw new IllegalArgumentException("event cannot be null!");

        eventMapper.add(event);
    }


    public void update(Event event) {
        if (event == null)
            throw new IllegalArgumentException("event cannot be null!");
        
        eventMapper.update(event);
        eventMapper.resetNotification(event);
    }

    public void delete(String ids) {
    	String[] array = ids.split(",");
		List<Long> list = new ArrayList<Long>();
		for (String id : array)
		{
			list.add(Long.parseLong(id));
		}
    	eventMapper.delete(list);
    }


	public void audit(Event event) {
		if (event == null)
            throw new IllegalArgumentException("event cannot be null!");
        
        eventMapper.audit(event);
		
	}


	public DataGrid<SignUserProfile> dataGridForSignUser(Map<String, Object> map) {
		DataGrid<SignUserProfile> dataGrid = new DataGrid<SignUserProfile>();
        long total = eventMapper.countSignUser(map);
        dataGrid.setTotal(total);
        int start = ((Integer) map.get("page") - 1) * (Integer) map.get("rows");
        map.put("start", start);
        List<SignUserProfile> list = eventMapper.querySignUser(map);
        dataGrid.setRows(list);
        return dataGrid;
	}


	public void undoDelete(long id) {
		eventMapper.undoDelete(id);
	}

}
